// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sandhog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SandhogClient is the client API for Sandhog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandhogClient interface {
	// Tell sandhog to start a new tunnel.
	StartTunnel(ctx context.Context, in *StartTunnelRequest, opts ...grpc.CallOption) (*StartTunnelResponse, error)
}

type sandhogClient struct {
	cc grpc.ClientConnInterface
}

func NewSandhogClient(cc grpc.ClientConnInterface) SandhogClient {
	return &sandhogClient{cc}
}

func (c *sandhogClient) StartTunnel(ctx context.Context, in *StartTunnelRequest, opts ...grpc.CallOption) (*StartTunnelResponse, error) {
	out := new(StartTunnelResponse)
	err := c.cc.Invoke(ctx, "/selftechio.sandhog.Sandhog/StartTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandhogServer is the server API for Sandhog service.
// All implementations must embed UnimplementedSandhogServer
// for forward compatibility
type SandhogServer interface {
	// Tell sandhog to start a new tunnel.
	StartTunnel(context.Context, *StartTunnelRequest) (*StartTunnelResponse, error)
	mustEmbedUnimplementedSandhogServer()
}

// UnimplementedSandhogServer must be embedded to have forward compatible implementations.
type UnimplementedSandhogServer struct {
}

func (UnimplementedSandhogServer) StartTunnel(context.Context, *StartTunnelRequest) (*StartTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTunnel not implemented")
}
func (UnimplementedSandhogServer) mustEmbedUnimplementedSandhogServer() {}

// UnsafeSandhogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandhogServer will
// result in compilation errors.
type UnsafeSandhogServer interface {
	mustEmbedUnimplementedSandhogServer()
}

func RegisterSandhogServer(s grpc.ServiceRegistrar, srv SandhogServer) {
	s.RegisterService(&_Sandhog_serviceDesc, srv)
}

func _Sandhog_StartTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandhogServer).StartTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/selftechio.sandhog.Sandhog/StartTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandhogServer).StartTunnel(ctx, req.(*StartTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sandhog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "selftechio.sandhog.Sandhog",
	HandlerType: (*SandhogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTunnel",
			Handler:    _Sandhog_StartTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sandhog/sandhog.proto",
}
