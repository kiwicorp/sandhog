syntax = "proto3";

option go_package = "github.com/selftechio/sandhog/internal/api/sandhog";

package selftechio.sandhog;

// A sandhog peer.
message SandhogPeer {
  string          public_key           = 1;
  repeated string allowed_ips          = 2;
  int32           listen_port          = 3;
  oneof endpoint {
    string endpoint_value = 4;
  }
  oneof persistent_keepalive {
    int32 persistent_keepalive_value = 5;
  }
}

// Request a sandhog to create a new tunnel.
message StartTunnelRequest {
  int32 magic = 1;
}

// A response from a sandhog that was requested to create a tunnel.
message StartTunnelResponse {
  bool            ok          = 1;
  // optional string err         = 2;
  // optional string address     = 3;
  // optional string public_key  = 4;
  // optional int32  listen_port = 5;
}

message DigTunnelRequest {
  int32       magic = 1;
  SandhogPeer peer  = 2;
}

message DigTunnelResponse {
  int32 magic = 1;
}

message BuryTunnelRequest {}

message BuryTunnelResponse {}

service Sandhog {
  // Tell sandhog to start a new tunnel.
  rpc StartTunnel(StartTunnelRequest) returns (StartTunnelResponse) {}
  // Tell sandhog to dig a new tunnel to a peer.
  rpc DigTunnel(DigTunnelRequest) returns (DigTunnelResponse) {}
  // Tell sandhog to bury a tunnel to a peer.
  rpc BuryTunnel(BuryTunnelRequest) returns (BuryTunnelResponse) {}
}
